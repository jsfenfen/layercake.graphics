[{"html":"<h3 id=\"what-is-layer-cake-\">What is Layer Cake?</h3>\n<p>Layer Cake is a graphics framework, built on top of <a href=\"https://svelte.technology\">Svelte</a> that removes the boilerplate from making responsive web graphics.</p>\n<p>Once you pass in your parameters of a target DOM element and some data, the library creates a <a href=\"https://svelte.technology/guide#state-management\">Svelte store</a> that includes scales bound to your element&#39;s dimensions and the data&#39;s extents. Layer Cake also includes higher level methods to organize multiple SVG, HTML and Canvas layers that use these scales.</p>\n<p>By breaking a part a graphic into layers, you can more easily reuse components from project to project. It also lets you easily move between web languages (SVG, Canvas, HTML, WebGL) by giving you a common coordinate system. You may be using Canvas for a scatterplot, SVG for axes and HTML for annotations but they all read from a common store and appear seamless to the viewer. You can choose the best technology for that part of the graphic without worrying about how it will interact with other elements.</p>\n<blockquote>\n<p>Layer Cake uses D3 scales. See more in the <a href=\"#xScale\">xScale</a>, <a href=\"#yScale\">yScale</a> and <a href=\"#rScale\">rScale</a> sections of the <a href=\"#store-api\">Store API</a>.</p>\n</blockquote>\n<p>Layer Cake is more about having a system to organize your own custom components than it is a high-level charting library. It doesn&#39;t have any built-in concepts or strong opinions about how your data should be structured.</p>\n<blockquote>\n<p>See the <a href=\"#flatten\"><code>flatten</code></a> and <a href=\"#flatData\"><code>flatData</code></a> methods in the <a href=\"#store-api\">Store API</a> section below for more info about data structure.</p>\n</blockquote>\n<h3 id=\"getting-started\">Getting started</h3>\n<p>Here is an example with a basic folder structure like this:</p>\n<div class='code-block'><pre><code>my-app\n ├── index.html\n └── js\n   └── main.js</code></pre></div><div class='code-block named'><span class='filename'> index.html</span><pre><code><span class=\"hljs-comment\">&lt;!-- The target div needs to have a width and a height --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chart-target\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 100%; height: 300px;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><div class='code-block named'><span class='filename'> js/main.js</span><pre><code><span class=\"hljs-keyword\">import</span> LayerCake <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n\n<span class=\"hljs-comment\">// Define some data</span>\n<span class=\"hljs-keyword\">const</span> points = [\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span>},\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">5</span>},\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>}\n];\n\n<span class=\"hljs-comment\">// Instantiate the cake, point it to our target div</span>\n<span class=\"hljs-comment\">// and which keys to look for on the data</span>\n<span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">target</span>: <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'chart-target'</span>),\n  <span class=\"hljs-attr\">data</span>: points,\n  <span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'x'</span>,\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'y'</span>\n});\n\n<span class=\"hljs-built_in\">console</span>.log(myCake.get());</code></pre></div><blockquote>\n<p>Each of the chart examples on the home page can be run locally by clicking into them and clikcing <code>Download</code>. If you are using Layer Cake within Sapper, the code here in <code>main.js</code> would go inside your components <code>oncreate()</code> method, which is how this examples site is built. You can also download a starter template at <a href=\"https://github.com/mhkeller/layercake-template\">github.com/mhkeller/layercake-template</a>.</p>\n</blockquote>\n<p>The <code>myCake</code> variable is a Svelte Store that just computed different properties to use in our chart. Because we gave Layer Cake values for <code>x</code> and <code>y</code>, it has measured the extent of our data&#39;s x- and y-dimensions and created <code>xScale</code> and <code>yScale</code> properties. It has also measured our DOM element as well as created x- and y-accessors so, for a given row of our data we can compute the value in our coordinate system.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> { x, y, xScale, yScale } = myCake.get();\n\npoints.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> firstPoint = [xScale(x(d)), yScale(y(d))];\n});</code></pre></div><blockquote>\n<p>You can also use the shorthand <code>[xGet(d), yGet(d)]</code>. See the <a href=\"#store-api\">Store API</a> section for a full list of computed properties.</p>\n</blockquote>\n<p>Because Layer Cake has bound the target DOM element&#39;s dimensions to your scales, all computed properties will update on resize automatically.</p>\n<h3 id=\"layer-components\">Layer components</h3>\n<p>While it&#39;s perfectly fine to use Layer Cake as a store and implement the rest of your project your own way, the library also comes with higher-level methods to create graphic layers and lay them out in a common coordinate space.</p>\n<p>To do this, pass a list of Svelte components to any of the <code>.svgLayers</code>, <code>.htmlLayers</code>, <code>.canvasLayers</code> or <code>.webglLayers</code> methods. When you&#39;ve added all the layers to your cake, run <code>.render()</code>.</p>\n<p>Here&#39;s an example creating an SVG scatter plot using the above data.</p>\n<div class='code-block named'><span class='filename'> main.js</span><pre><code><span class=\"hljs-keyword\">import</span> LayerCake <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n<span class=\"hljs-keyword\">import</span> Scatter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Scatter.html'</span>;\n\n<span class=\"hljs-keyword\">const</span> points = [\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span>},\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">5</span>},\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'x'</span>,\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'y'</span>,\n  <span class=\"hljs-attr\">data</span>: points,\n  <span class=\"hljs-attr\">target</span>: <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'chart-target'</span>)\n})\n  .svgLayers([\n\t{ <span class=\"hljs-attr\">component</span>: Scatter, <span class=\"hljs-attr\">opts</span>: { <span class=\"hljs-attr\">fill</span>: <span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-attr\">r</span>: <span class=\"hljs-number\">3</span> } } <span class=\"hljs-comment\">// The opts field is optional but exists to let you pass settings down to your components so they can be more reusable.</span>\n  ])\n\nmyCake.render();</code></pre></div><div class='code-block named'><span class='filename'> /components/Scatter.html</span><pre><code>{#each $data as d}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">'{xGet(d)}'</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">'{yGet(d)}'</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">'{opts.fill}'</span> <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">'{opts.r}'</span> /&gt;</span>\n{/each}</code></pre></div><blockquote>\n<p>We&#39;ve defined the circle&#39;s fill color and radius size in <code>main.js</code> using the <code>opts</code> field. You could very well hardcode these values into your layer component. Passing in values from <code>mains.js</code> is shown here to give an example of how you can make your components more reusable. For example, you could use the same layer component to render small multiples, but pass in a color to highlight one of them.</p>\n</blockquote>\n<p>Our DOM now looks something like this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"&lt;el width&gt;\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"&lt;el height&gt;\"</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- One main g to wrap all layers --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span>&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- Scatter g --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span>&gt;</span>\n\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">\"blue\"</span>/&gt;</span>\n\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">\"blue\"</span>/&gt;</span>\n\t  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">\"...\"</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">\"blue\"</span>/&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span></span></code></pre></div><h3 id=\"more-layer-types\">More layer types</h3>\n<p>We just saw how to add SVG layers with the <code>.svgLayers</code> method. You also have <code>htmlLayers</code> and <code>canvasLayers</code>. For the SVG and HTML groups, every item in the array will create a new DOM element to render into, <code>&lt;g&gt;</code> for SVG and <code>&lt;div&gt;</code> for HTML. For Canvas, since there&#39;s no DOM equivalent, each layer renders into the same Canvas context. See the <a href=\"examples/Scatter\">Scatter canvas</a> example for details.</p>\n<p>Layers are rendered in the order they appear and you can call these methods multiple times to create a new layout group.</p>\n<div class='code-block named'><span class='filename'> main.js</span><pre><code><span class=\"hljs-keyword\">import</span> LayerCake <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n\n<span class=\"hljs-keyword\">import</span> ScatterCanvas <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/ScatterCanvas.html'</span>;\n<span class=\"hljs-keyword\">import</span> AxisX <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/AxisX.html'</span>;\n<span class=\"hljs-keyword\">import</span> AxisY <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/AxisY.html'</span>;\n<span class=\"hljs-keyword\">import</span> Annotations <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Annotations.html'</span>;\n\n<span class=\"hljs-keyword\">const</span> blurbs = [\n  { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Look at this value!'</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> points = [\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span>},\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">5</span>},\n  {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'x'</span>,\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'y'</span>,\n  <span class=\"hljs-attr\">data</span>: points,\n  <span class=\"hljs-attr\">target</span>: <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'chart-target'</span>)\n})\n  .canvasLayers([\n\t{ <span class=\"hljs-attr\">component</span>: Scatter, <span class=\"hljs-attr\">opts</span>: { <span class=\"hljs-attr\">fill</span>: <span class=\"hljs-string\">'blue'</span>, <span class=\"hljs-attr\">r</span>: <span class=\"hljs-number\">3</span> } }\n  ])\n  .svgLayers([\n\t{ <span class=\"hljs-attr\">component</span>: AxisX, <span class=\"hljs-attr\">opts</span>: { } },\n\t{ <span class=\"hljs-attr\">component</span>: AxisY, <span class=\"hljs-attr\">opts</span>: { } }\n  ])\n  .htmlLayers([\n\t{ <span class=\"hljs-attr\">component</span>: Annotations, <span class=\"hljs-attr\">opts</span>: { blurbs } }\n  ]);\n  <span class=\"hljs-comment\">// If you needed to, you could do `.svgLayers` again...</span>\n\nmyCake.render();</code></pre></div><blockquote>\n<p>Many common chart types have example pages. See the gallery at <a href=\"https://layercake.graphics\">https://layercake.graphics</a> or use the dropdown menu at the top of the page to navigate to one.</p>\n</blockquote>\n<h3 id=\"data-less-cakes\">Data-less cakes</h3>\n<p>You can also use Layer Cake to simply arrange SVG, HTML, Canvas and WebGL elements on top of one another, sharing the same dimensions. For example, this would be handy if you have some SVG artwork that you want to put on top of an HTML video player.</p>\n<p>Here&#39;s an example just setting the <code>target</code> value.</p>\n<div class='code-block named'><span class='filename'> main.js</span><pre><code><span class=\"hljs-keyword\">import</span> LayerCake <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n<span class=\"hljs-keyword\">import</span> Frame <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Frame.html'</span>;\n<span class=\"hljs-keyword\">import</span> VideoPlayer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/VideoPlayer.html'</span>;\n\n<span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">target</span>: <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'chart-target'</span>)\n})\n  .svgLayers([\n\t{ <span class=\"hljs-attr\">component</span>: Frame }\n  ])\n  .htmlLayers([\n\t{ <span class=\"hljs-attr\">component</span>: VideoPlayer }\n  ]);\n\nmyCake.render();</code></pre></div>","metadata":{"title":"Introduction"},"subsections":[{"slug":"what-is-layer-cake-","title":"What is Layer Cake?"},{"slug":"getting-started","title":"Getting started"},{"slug":"layer-components","title":"Layer components"},{"slug":"more-layer-types","title":"More layer types"},{"slug":"data-less-cakes","title":"Data-less cakes"}],"slug":"introduction","file":"00-introduction.md"},{"html":"<h3 id=\"target-dom-node\">target: <code>&lt;DOM Node&gt;</code></h3>\n<p>The DOM object you want to use as the the basis for measurements and for rendering into.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">target</span>: <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'my-chart'</span>)\n});</code></pre></div><blockquote>\n<p>Only <code>target</code> is required. Everything else is optional.</p>\n</blockquote>\n<h3 id=\"data-array\">data: <code>&lt;Array&gt;</code></h3>\n<p>A list of data items. This is available on the store as <code>$data</code>.</p>\n<h3 id=\"x-string-function-array\">x: <code>&lt;String|Function|Array&gt;</code></h3>\n<p>The key in each row of data that corresponds to the x-field. This can be a string or an accessor function. This property gets converted to an accessor function available on the store as <code>$x</code>.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'myX'</span>,\n  <span class=\"hljs-comment\">// equivalent to...</span>\n  x: <span class=\"hljs-function\">(<span class=\"hljs-params\">d</span>) =&gt;</span> d.myX\n});</code></pre></div><p>You can also give this value an array of strings or arrays of functions. While it may seem counter-intuitive to have more than one x- or y-accessor, this is the case in stacked layouts and Cleveland dot plots. See the <a href=\"/examples/BarStacked\">Stacked bar</a>, <a href=\"/examples/AreaStacked\">Stacked area</a> or <a href=\"/examples/ColumnStacked\">Stacked colummn</a> for complete examples.</p>\n<p>Here&#39;s an overview using the <code>d3.stack()</code> to make a horizontal bar chart, which will have two values for the x-accessor.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> data = [\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">3840</span>, <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">1920</span>, <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">960</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">1600</span>, <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">1440</span>, <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">960</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">640</span>,  <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">960</span>,  <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">640</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">320</span>,  <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">480</span>,  <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">640</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> stack = d3.stack()\n\t.keys([<span class=\"hljs-string\">'apples'</span>, <span class=\"hljs-string\">'bananas'</span>, <span class=\"hljs-string\">'cherries'</span>, <span class=\"hljs-string\">'dates'</span>]);\n\n<span class=\"hljs-keyword\">const</span> series = stack(data);</code></pre></div><p>The data is now an array of values. The <code>month</code> values you can&#39;t see because sneakily stashes them as a property on the array, accessible as <code>d.data</code>.</p>\n<div class='code-block'><pre><code>[\n  [[   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3840</span>], [   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1600</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">640</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">320</span>]], <span class=\"hljs-comment\">// apples</span>\n  [[<span class=\"hljs-number\">3840</span>, <span class=\"hljs-number\">5760</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">3040</span>], [ <span class=\"hljs-number\">640</span>, <span class=\"hljs-number\">1600</span>], [ <span class=\"hljs-number\">320</span>,  <span class=\"hljs-number\">800</span>]], <span class=\"hljs-comment\">// bananas</span>\n  [[<span class=\"hljs-number\">5760</span>, <span class=\"hljs-number\">6720</span>], [<span class=\"hljs-number\">3040</span>, <span class=\"hljs-number\">4000</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2240</span>], [ <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">1440</span>]], <span class=\"hljs-comment\">// cherries</span>\n  [[<span class=\"hljs-number\">6720</span>, <span class=\"hljs-number\">7120</span>], [<span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">4400</span>], [<span class=\"hljs-number\">2240</span>, <span class=\"hljs-number\">2640</span>], [<span class=\"hljs-number\">1440</span>, <span class=\"hljs-number\">1840</span>]]  <span class=\"hljs-comment\">// dates</span>\n]</code></pre></div><p>The x- and y-accessors would then look like this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">x</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d.data.month\n});</code></pre></div><p>Calls to <code>x(dataRow)</code> in this scenario will return the two-value array. Calls to <code>xGet(dataRow)</code> will return a two-value array, mapped through the <a href=\"#xScale\">xScale</a>.</p>\n<h3 id=\"y-string-function-array\">y: <code>&lt;String|Function|Array&gt;</code></h3>\n<p>Same as <a href=\"#x\">x</a> but for the y scale. The accessor function is available on the store as <code>$y</code>.</p>\n<h3 id=\"r-string-function-array\">r: <code>&lt;String|Function|Array&gt;</code></h3>\n<p>Same as <a href=\"#x\">x</a> but for the r scale. The accessor function is available on the store as <code>$r</code>.</p>\n<h3 id=\"padding-object\">padding: <code>&lt;Object&gt;</code></h3>\n<p>An object that can specify <code>top</code>, <code>right</code>, <code>bottom</code>, or <code>left</code> padding in pixels. Any unspecified values are filled in as <code>0</code>. Padding operates like CSS <code>box-sizing: border-box;</code> where values are subtracted from the target container&#39;s width and height, the same as <a href=\"https://bl.ocks.org/mbostock/3019563\">a D3 margin convention</a>.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">padding</span>: { <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">bottom</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">0</span> },\n  <span class=\"hljs-comment\">// equivalent to...</span>\n  padding: { <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">10</span> }\n});</code></pre></div><blockquote>\n<p>Another way to set padding is to add it via normal CSS on your <a href=\"#target\">target</a> div. The target element is assigned CSS of <code>box-sizing: border-box;</code> so padding settings won&#39;t affect the width or height. If you set any padding via CSS, the padding object will be ignored.</p>\n</blockquote>\n<h3 id=\"xscale-d3scale-\">xScale: d3Scale()</h3>\n<p>Pass in an instantiated D3 scale if you want to override the default <code>d3.scaleLinear()</code> or you want to add extra options.</p>\n<p>See the <a href=\"/examples/Column\">Column chart</a> for an example of passing in a <code>d3.scaleBand()</code> to override the default.</p>\n<h3 id=\"yscale-d3scale-\">yScale: d3Scale()</h3>\n<p>Same as <a href=\"#xScale\">xScale</a> but for the y scale. The default is <code>d3.scaleLinear()</code>.</p>\n<h3 id=\"rscale-d3scale-\">rScale: d3Scale()</h3>\n<p>Same as <a href=\"#xScale\">xScale</a> but for the r scale. The default is <code>d3.scaleSqrt()</code>.</p>\n<h3 id=\"xdomain-array-min-max-\">xDomain: <code>&lt;Array:[min, max]&gt;</code></h3>\n<p>Set a min or max on the x scale. If you want to inherit the value from the data&#39;s extent, set that value to <code>null</code>.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">xDomain</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>], <span class=\"hljs-comment\">// Fixes the x scale's domain</span>\n  <span class=\"hljs-comment\">// or..</span>\n  xDomain: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>], <span class=\"hljs-comment\">// Fixes the min but allows the max to be whatever is in the data</span>\n});</code></pre></div><h3 id=\"ydomain-array-min-max-\">yDomain: <code>&lt;Array:[min, max]&gt;</code></h3>\n<p>Same as <a href=\"#xDomain\">xDomain</a> but for the y scale.</p>\n<h3 id=\"rdomain-array-min-max-\">rDomain: <code>&lt;Array:[min, max]&gt;</code></h3>\n<p>Same as <a href=\"#xDomain\">xDomain</a> but for the r scale.</p>\n<h3 id=\"reversex-boolean-false\">reverseX: <code>&lt;Boolean:false&gt;</code></h3>\n<p>Reverse the default x domain. By default this is <code>false</code> and the domain is <code>[0, width]</code>.</p>\n<h3 id=\"reversey-boolean-true\">reverseY: <code>&lt;Boolean:true&gt;</code></h3>\n<p>Reverse the default y domain. By default this is <code>true</code> and the domain is <code>[height, 0]</code>.</p>\n<h3 id=\"xpadding-array-leftpixels-rightpixels-\">xPadding: <code>&lt;Array:[leftPixels, rightPixels]&gt;</code></h3>\n<p>Assign a pixel value to add to the min or max of the x scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. It uses D3 scale&#39;s <a href=\"https://github.com/d3/d3-scale#continuous_invert\">invert function</a>, so this only applies to continuous scales like <code>scaleLinear</code>. This is useful for adding extra space to a scatter plot so that your circles don&#39;t interfere with your y axis.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">xPadding</span>: [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>], <span class=\"hljs-comment\">// Add ten pixels of data units to both sides of the scale's domain</span>\n});</code></pre></div><h3 id=\"ypadding-array-leftpixels-rightpixels-\">yPadding: <code>&lt;Array:[leftPixels, rightPixels]&gt;</code></h3>\n<p>Same as <a href=\"#xPadding\">xPadding</a> but for the y domain.</p>\n<h3 id=\"rpadding-array-leftpixels-rightpixels-\">rPadding: <code>&lt;Array:[leftPixels, rightPixels]&gt;</code></h3>\n<p>Same as <a href=\"#xPadding\">xPadding</a> but for the r domain.</p>\n<h3 id=\"rrange-array-min-max-\">rRange: <code>&lt;Array:[min, max]&gt;</code></h3>\n<p>If you&#39;re using the r scale, set it&#39;s range here since it doesn&#39;t infer that from anything in the layout. The r scale defaults to <code>d3.scaleSqrt</code> so make sure you don&#39;t use a zero in your range.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n  <span class=\"hljs-attr\">rRange</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>]\n});</code></pre></div><h3 id=\"xnice-boolean-false\">xNice: <code>&lt;Boolean:false&gt;</code></h3>\n<p>Applies D3&#39;s <a href=\"https://github.com/d3/d3-scale#continuous_nice\">scale.nice()</a> to the x domain. This is a separate option instead of being one you can apply to a passed in scale because D3&#39;s &quot;nice&quot; transformation only works on existing domains and does not use a state to be able to tell if your existing scale wants to be nice.</p>\n<h3 id=\"ynice-boolean-false\">yNice: <code>&lt;Boolean:false&gt;</code></h3>\n<p>Same as <a href=\"#xPadding\">xNice</a> but for the y domain.</p>\n<h3 id=\"rnice-boolean-false\">rNice: <code>&lt;Boolean:false&gt;</code></h3>\n<p>Same as <a href=\"#xPadding\">xNice</a> but for the r domain.</p>\n<h3 id=\"flatdata-array\">flatData: <code>&lt;Array&gt;</code></h3>\n<p>In order for Layer Cake to measure the extents of your data, it needs a flat array of items that the x, y and r accessors can find. If your data is not flat (often the case if your renderers prefer a more nested format), you can tell it to measure extents against a flat version. This <em>will not</em> change the shape of the data that gets passed to components — it is only for extent calculation.</p>\n<blockquote>\n<p>The library also exports a flattening function to handle common use cases if you need to flatten your data and you don&#39;t already have a flat version. See the <a href=\"#flatten-data-\">flatten</a> helper function for more info.</p>\n</blockquote>\n<p>Here&#39;s an example showing passing different data formats for extent calculation versus what is used by layer components.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> flatData = [\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3840</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'apples'</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1600</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'apples'</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">640</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">'apples'</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">320</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">'apples'</span>},\n\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1920</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'bananas'</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1440</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'bananas'</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">960</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">'bananas'</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">480</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">'bananas'</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> data = [\n  {\n\t<span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'apples'</span>,\n\t<span class=\"hljs-attr\">values</span>: [{<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3840</span>}, ...]\n  },\n  {\n\t<span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'bananas'</span>,\n\t<span class=\"hljs-attr\">values</span>: [{<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1920</span>}, ...]\n  },\n];\n\n<span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n\ttarget,\n\t<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'month'</span>,\n\t<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'value'</span>,\n\tdata,\n\tflatData\n  });</code></pre></div>","metadata":{"title":"Store API"},"subsections":[{"slug":"target-dom-node","title":"target"},{"slug":"data-array","title":"data"},{"slug":"x-string-function-array","title":"x"},{"slug":"y-string-function-array","title":"y"},{"slug":"r-string-function-array","title":"r"},{"slug":"padding-object","title":"padding"},{"slug":"xscale-d3scale-","title":"xScale"},{"slug":"yscale-d3scale-","title":"yScale"},{"slug":"rscale-d3scale-","title":"rScale"},{"slug":"xdomain-array-min-max-","title":"xDomain"},{"slug":"ydomain-array-min-max-","title":"yDomain"},{"slug":"rdomain-array-min-max-","title":"rDomain"},{"slug":"reversex-boolean-false","title":"reverseX"},{"slug":"reversey-boolean-true","title":"reverseY"},{"slug":"xpadding-array-leftpixels-rightpixels-","title":"xPadding"},{"slug":"ypadding-array-leftpixels-rightpixels-","title":"yPadding"},{"slug":"rpadding-array-leftpixels-rightpixels-","title":"rPadding"},{"slug":"rrange-array-min-max-","title":"rRange"},{"slug":"xnice-boolean-false","title":"xNice"},{"slug":"ynice-boolean-false","title":"yNice"},{"slug":"rnice-boolean-false","title":"rNice"},{"slug":"flatdata-array","title":"flatData"}],"slug":"store-api","file":"01-store-api.md"},{"html":"<p>When you run <code>new LayerCake(StoreValues)</code> the Svelte store you get back has the following methods.</p>\n<p>Each of the <code>xyzLayers</code> functions takes as a first argument an array of objects for each layer. You can optionally pass in an options object as the second argument. All of the layers methods share this pattern:</p>\n<div class='code-block'><pre><code>.xyzLayers([\n  { <span class=\"hljs-attr\">component</span>: SvelteComponent, <span class=\"hljs-attr\">opts</span>: {} }\n], {\n  <span class=\"hljs-attr\">zIndex</span>: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional</span> <span class=\"hljs-attr\">z-index</span> <span class=\"hljs-attr\">number</span>&gt;</span>\n})</span></code></pre></div><p>If you set an <code>opts</code> object on your component layer, those values will be available in the component under <code>opts</code>, e.g. <code>{ component: SvelteComponent, opts: { color: &#39;#f0c&#39; } }</code>.</p>\n<blockquote>\n<p>All of the container elements created by <code>Layers</code> functions are absolutely positioned and use any <a href=\"#padding\">padding</a> that is set. That way, they share the same coordinate system and can sit one on top of another.</p>\n</blockquote>\n<h3 id=\"cake-svglayers-componentslist-opts-\"><span class=\"function\">cake.</span>svgLayers<span class=\"call\">(<span class=\"arguments\">ComponentsList[, opts]</span>)</span></h3>\n<p>Creates a <code>&lt;svg&gt;</code> element containing one <code>&lt;g&gt;</code> wrapper element, which gets translated based on any <a href=\"#padding\">padding</a>.</p>\n<p>For every component layer in the passed in array, a <code>&lt;g&gt;</code> element is created.</p>\n<h3 id=\"cake-htmllayers-componentslist-opts-\"><span class=\"function\">cake.</span>htmlLayers<span class=\"call\">(<span class=\"arguments\">ComponentsList[, opts]</span>)</span></h3>\n<p>Creates a <code>&lt;div&gt;</code> element.</p>\n<p>For every component layer in the passed in array, a <code>&lt;div&gt;</code> element is created.</p>\n<h3 id=\"cake-canvaslayers-componentslist-opts-\"><span class=\"function\">cake.</span>canvasLayers<span class=\"call\">(<span class=\"arguments\">ComponentsList[, opts]</span>)</span></h3>\n<p>Creates a <code>&lt;canvas&gt;</code> element.</p>\n<p>Because canvas elements have no DOM representation for each layer, you get access to the canvas and the 2d context as <em>data items</em> in each layer component. These aren&#39;t store values since you could have multiple canvas elements in a cake.</p>\n<p>This means you access the <code>canvas</code> and <code>ctx</code> using <code>this.get()</code> instead of <code>this.store.get()</code>. For example, here&#39;s how a scatterplot layer component would be implemented in canvas.</p>\n<div class='code-block named'><span class='filename'> CanvasLayer.html</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  oncreate () {\n\t<span class=\"hljs-keyword\">const</span> { canvas, ctx } = <span class=\"hljs-keyword\">this</span>.get();\n\t<span class=\"hljs-keyword\">const</span> { xGet, yGet, data } = <span class=\"hljs-keyword\">this</span>.store.get();\n\n\tdata.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> {\n\t  ctx.beginPath();\n\t  ctx.arc(xGet(d), yGet(d), opts.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n\t  ctx.fillStyle = opts.color;\n\t  ctx.fill();\n\t});\n  }\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div><p>Canvas layouts have more options for <code>opts</code>. Anything you set here (except for <code>zIndex</code>) will get passed as the second argument to  <code>canvas.getContext(&#39;2d&#39;, opts)</code>. See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\">Canvas docs</a> for what options are possible.</p>\n<h3 id=\"cake-webgllayers-componentslist-opts-\"><span class=\"function\">cake.</span>webglLayers<span class=\"call\">(<span class=\"arguments\">ComponentsList[, opts]</span>)</span></h3>\n<p>Same as the canvas element except instead of <code>ctx</code> you have <code>gl</code> as a component-level data item, which is your webgl context. If webgl is not supported, <code>gl</code> will be <code>null</code>.</p>\n<p>Same as in <code>.canvasLayers</code>, any options that you set on <code>opts</code> (except for <code>zIndex</code>) will get passed as the second argument to  <code>canvas.getContext(&#39;webgl&#39;, opts)</code>. See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\">Canvas docs</a> for what options are possible.</p>\n<h3 id=\"cake-render-options-\"><span class=\"function\">cake.</span>render<span class=\"call\">(<span class=\"arguments\">options</span>)</span></h3>\n<p>Instantiates your cake and layout groups. Returns an object <code>{ app, store }</code> where <code>app</code> is the instantiated Svelte app and <code>store</code> is the cake&#39;s Svelte store. Any options you pass in are added as <a href=\"https://svelte.technology/guide#component-options\">Svelte options</a>, including <code>hydrate</code>.</p>\n","metadata":{"title":"Cake API"},"subsections":[{"slug":"cake-svglayers-componentslist-opts-","title":"cake.svgLayers(...)"},{"slug":"cake-htmllayers-componentslist-opts-","title":"cake.htmlLayers(...)"},{"slug":"cake-canvaslayers-componentslist-opts-","title":"cake.canvasLayers(...)"},{"slug":"cake-webgllayers-componentslist-opts-","title":"cake.webglLayers(...)"},{"slug":"cake-render-options-","title":"cake.render(...)"}],"slug":"cake-api","file":"02-cake-api.md"},{"html":"<p>Some convenience functions and other internal properties are exposed to the user on the store in case they&#39;re handy.</p>\n<h3 id=\"box\">box</h3>\n<p>A bounding box object of the <a href=\"#target\">target</a> element with <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, <code>width</code> and <code>height</code> numbers in pixels. Useful for creating tooltips.</p>\n<h2 id=\"domains\">domains</h2>\n<p>An object containing a key for every <a href=\"#activeKeys\">active key</a> whose value is a two-value array representing the min and max values for that dimension in the data. This value could differ from the domain of your scale if you are manually setting a limit on your scale, for instance. That limit would not show up here since this is just measuring the data. Used internally to set domain things.</p>\n<h3 id=\"xget-datarow-\">xGet<span class=\"call\">(<span class=\"arguments\">dataRow</span>)</span></h3>\n<p>Often you want to get the x value from a row in your data and scale it like so: <code>$xScale($x(d))</code>. This function is shorthand for doing just that. Super handy!</p>\n<p>Here&#39;s an example from a simple SVG line path generator:</p>\n<div class='code-block'><pre><code>computed: {\n  <span class=\"hljs-attr\">path</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ $data, $xGet, $yGet }</span>) =&gt;</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'M'</span> + $data\n\t  .map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">d, i</span>) </span>{\n\t\t<span class=\"hljs-keyword\">return</span> $xGet(d) + <span class=\"hljs-string\">','</span> + $yGet(d);\n\t  })\n\t  .join(<span class=\"hljs-string\">'L'</span>);\n  }\n}</code></pre></div><h3 id=\"yget-datarow-\">yGet<span class=\"call\">(<span class=\"arguments\">dataRow</span>)</span></h3>\n<p>Same as <a href=\"#xGet\">xGet</a> but for the y scale.</p>\n<h3 id=\"rget-datarow-\">rGet<span class=\"call\">(<span class=\"arguments\">dataRow</span>)</span></h3>\n<p>Same as <a href=\"#xGet\">xGet</a> but for the r scale.</p>\n<h3 id=\"activekeys\">activeKeys</h3>\n<p>A list of all the keys that have an accessor set.</p>\n<h3 id=\"domains\">domains</h3>\n<p>An object containing a key for every <a href=\"#activekeys\">active key</a> whose value is a two-value array representing the min and max values for that field in the data. This value could differ from the domain of your scale if you are manually setting a limit on your scale by setting any of the <code>xDomain</code>, <code>yDomain</code> or <code>rDomain</code> settings. This is used internally to set domain things but it&#39;s also useful as a reference if you want to toggle between an arbitrary domain and the measured extents of the data, such as in the <a href=\"/examples/SmallMultiples\">small multiples example</a>.</p>\n","metadata":{"title":"Computed Store Properties"},"subsections":[{"slug":"box","title":"box"},{"slug":"xget-datarow-","title":"xGet(...)"},{"slug":"yget-datarow-","title":"yGet(...)"},{"slug":"rget-datarow-","title":"rGet(...)"},{"slug":"activekeys","title":"activeKeys"},{"slug":"domains","title":"domains"}],"slug":"computed-store-functions","file":"04-computed-store-functions.md"},{"html":"<p>Layer Cake exposes some commonly-used helper functions. If you don&#39;t use them, they will be tree-shaken so there&#39;s no added bloat!</p>\n<h3 id=\"newdiv-classname-stylesobject-parentdomnode-\">newDiv<span class=\"call\">(<span class=\"arguments\">className[, stylesObject, parentDomNode]</span>)</span></h3>\n<p>Easily create new divs. If you pass a DOM node as the third argument it will attach it to that object.</p>\n<p>Handy when creating small multiples. You can put your cake inside a loop and append a new <a href=\"#target\">target</a> div for every chart.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> Layercake, newDiv } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'container'</span>);\n\n<span class=\"hljs-keyword\">const</span> styles = {\n  <span class=\"hljs-attr\">position</span>: <span class=\"hljs-string\">'relative'</span>\n};\n\n<span class=\"hljs-keyword\">const</span> myDiv = newDiv(<span class=\"hljs-string\">'my-div'</span>, styles, container);\n\n<span class=\"hljs-comment\">// Or attach yourself</span>\n<span class=\"hljs-keyword\">const</span> myDiv = container.appendChild(newDiv(<span class=\"hljs-string\">'my-div'</span>, styles));</code></pre></div><p>With small multiples:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> Layercake, newDiv} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n<span class=\"hljs-keyword\">import</span> AxisX <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/AxisX.html'</span>\n<span class=\"hljs-keyword\">import</span> AxisY <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/AxisY.html'</span>\n<span class=\"hljs-keyword\">import</span> Scatter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Scatter.html'</span>\n\n<span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'container'</span>);\n\n<span class=\"hljs-keyword\">const</span> styles = {\n  <span class=\"hljs-attr\">position</span>: <span class=\"hljs-string\">'relative'</span>,\n  <span class=\"hljs-attr\">display</span>: <span class=\"hljs-string\">'inline-block'</span>\n};\n\n<span class=\"hljs-keyword\">const</span> datasets = [\n  [data<span class=\"hljs-number\">-1.</span>..],\n  [data<span class=\"hljs-number\">-2.</span>..],\n  [data<span class=\"hljs-number\">-3.</span>..]\n];\n\ndatasets.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> target = newDiv(<span class=\"hljs-string\">'my-div'</span>, styles, container);\n\n  <span class=\"hljs-keyword\">const</span> myCake = <span class=\"hljs-keyword\">new</span> LayerCake({\n\ttarget,\n\tdata,\n\t<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'myX'</span>,\n\t<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'myY'</span>\n  })\n\t.svgLayers([\n\t  { <span class=\"hljs-attr\">component</span>: AxisX },\n\t  { <span class=\"hljs-attr\">component</span>: AxisY },\n\t  { <span class=\"hljs-attr\">component</span>: Scatter }\n\t]);\n\n  myCake.render();\n});</code></pre></div><h3 id=\"flatten-data-\">flatten<span class=\"call\">(<span class=\"arguments\">data</span>)</span></h3>\n<p>Flatten an array one-level down. Handy for preparing data from stacked layouts whose extents can easily be calculated.</p>\n<p>This data:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> data = [\n  [{<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">5</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>}],\n  [{<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">15</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>}]\n];</code></pre></div><p>Becomes this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">import</span> { flatten } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n\n<span class=\"hljs-keyword\">const</span> flatData = flatten(data);\n<span class=\"hljs-comment\">/*\n  [{x: 0, y: 1}, {x: 1, y: 5}, {x: 2, y: 10},\n   {x: 0, y: 10}, {x: 1, y: 15}, {x: 2, y: 20}]\n*/</span></code></pre></div><p>You can safely use this function on arrays of arrays of arrays, such as the output from <code>d3.stack()</code></p>\n<div class='code-block'><pre><code>[\n  [[   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3840</span>], [   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1600</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">640</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">320</span>]],\n  [[<span class=\"hljs-number\">3840</span>, <span class=\"hljs-number\">5760</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">3040</span>], [ <span class=\"hljs-number\">640</span>, <span class=\"hljs-number\">1600</span>], [ <span class=\"hljs-number\">320</span>,  <span class=\"hljs-number\">800</span>]],\n  [[<span class=\"hljs-number\">5760</span>, <span class=\"hljs-number\">6720</span>], [<span class=\"hljs-number\">3040</span>, <span class=\"hljs-number\">4000</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2240</span>], [ <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">1440</span>]],\n  [[<span class=\"hljs-number\">6720</span>, <span class=\"hljs-number\">7120</span>], [<span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">4400</span>], [<span class=\"hljs-number\">2240</span>, <span class=\"hljs-number\">2640</span>], [<span class=\"hljs-number\">1440</span>, <span class=\"hljs-number\">1840</span>]]\n]</code></pre></div><p>Becomes...</p>\n<div class='code-block'><pre><code>[ [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3840</span> ],\n  [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1600</span> ],\n  [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">640</span> ],\n  [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">320</span> ],\n  [ <span class=\"hljs-number\">3840</span>, <span class=\"hljs-number\">5760</span> ],\n  [ <span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">3040</span> ],\n  [ <span class=\"hljs-number\">640</span>, <span class=\"hljs-number\">1600</span> ],\n  [ <span class=\"hljs-number\">320</span>, <span class=\"hljs-number\">800</span> ],\n  [ <span class=\"hljs-number\">5760</span>, <span class=\"hljs-number\">6720</span> ],\n  [ <span class=\"hljs-number\">3040</span>, <span class=\"hljs-number\">4000</span> ],\n  [ <span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2240</span> ],\n  [ <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">1440</span> ],\n  [ <span class=\"hljs-number\">6720</span>, <span class=\"hljs-number\">7120</span> ],\n  [ <span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">4400</span> ],\n  [ <span class=\"hljs-number\">2240</span>, <span class=\"hljs-number\">2640</span> ],\n  [ <span class=\"hljs-number\">1440</span>, <span class=\"hljs-number\">1840</span> ]\n]</code></pre></div><h3 id=\"scalecanvas-canvas-ctx-width-height-\">scaleCanvas<span class=\"call\">(<span class=\"arguments\">canvas, ctx, width, height</span>)</span></h3>\n<p>Scale your canvas size to retina screens. This function will modify the canvas, if necessary, and return an object with the new <code>width</code> and <code>height</code> as properties.</p>\n<p>Such as in the <a href=\"/examples/Scatter\">Scatter canvas</a> example:</p>\n<div class='code-block named'><span class='filename'> Scatter.html</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { scaleCanvas } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'LayerCake'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  onstate () {\n\t<span class=\"hljs-keyword\">const</span> { canvas, ctx, opts } = <span class=\"hljs-keyword\">this</span>.get();\n\t<span class=\"hljs-keyword\">const</span> { width, height, xGet, yGet, data, custom } = <span class=\"hljs-keyword\">this</span>.store.get();\n\n\tscaleCanvas(canvas, ctx, width, height);\n\tctx.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height);\n\n\tdata.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> {\n\t  ctx.beginPath();\n\t  ctx.arc(xGet(d), yGet(d), custom.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n\t  ctx.fillStyle = opts.color;\n\t  ctx.fill();\n\t});\n  }\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div><h3 id=\"calcextents-flatdata-fields-\">calcExtents<span class=\"call\">(<span class=\"arguments\">flatData, fields</span>)</span></h3>\n<p>Calculate the extents of any of the keys specified in <code>fields</code>, which is an array of objects with <code>field</code> and <code>accessor</code> keys, representing the field name (x, y, r) and an accessor function.</p>\n<p>For example, calculating the extents for the x and y fields, which are in the data as <code>myX</code> and <code>myY</code> would look like this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> extents = calcExtents(flatData, [\n  {<span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">'x'</span>, <span class=\"hljs-attr\">accessor</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d.myX },\n  {<span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">'y'</span>, <span class=\"hljs-attr\">accessor</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d.myY }\n]);\n\n<span class=\"hljs-built_in\">console</span>.log(extents);\n<span class=\"hljs-comment\">/*\n{\n  x: [0, 10],\n  y: [-20, 20]\n}\n*/</span></code></pre></div><p>Returns an object whose keys are the field names specified as the first item in the key group array followed by an array of <code>[min, max]</code>.</p>\n","metadata":{"title":"Helper functions"},"subsections":[{"slug":"newdiv-classname-stylesobject-parentdomnode-","title":"newDiv(...)"},{"slug":"flatten-data-","title":"flatten(...)"},{"slug":"scalecanvas-canvas-ctx-width-height-","title":"scaleCanvas(...)"},{"slug":"calcextents-flatdata-fields-","title":"calcExtents(...)"}],"slug":"helper-functions","file":"99-helper-functions.md"}]