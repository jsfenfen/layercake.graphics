{"main":{"title":"main.js","contents":"import { default as LayerCake, flatten, uniques } from 'layercake';\nimport { stack } from 'd3-shape';\nimport { scaleBand } from 'd3-scale';\nimport fruit from './data/fruitOrdinal.js';\nimport ColumnStacked from './components/ColumnStacked.html';\nimport AxisX from './components/AxisXScaleBand.html';\nimport AxisY from './components/AxisY.html';\n\nconst seriesNames = Object.keys(fruit[0]).filter(d => d !== 'year');\n\nconst stackData = stack()\n  .keys(seriesNames);\n\nconst series = stackData(fruit);\n\nfunction formatYTick (d) {\n  if (d > 999) {\n    return Math.round(d / 1000) + 'k';\n  }\n  return d;\n}\n\nconst colors = ['#00e047', '#7ceb68', '#b7f486', '#ecfda5'];\n\nconst myCake = new LayerCake({\n  padding: { top: 0, right: 0, bottom: 20, left: 20 },\n  x: d => d.data.year,\n  y: [0, 1],\n  xScale: scaleBand().paddingInner([0.02]).round(true),\n  xDomain: uniques(fruit, 'year'),\n  flatData: flatten(series),\n  data: series,\n  target: document.getElementById('my-chart'),\n  seriesNames_: seriesNames\n})\n  .svgLayers([\n    { component: AxisX, opts: { gridlines: false } },\n    { component: AxisY, opts: { gridlines: false, formatTick: formatYTick } },\n    { component: ColumnStacked, opts: { colors } }\n  ]);\n\nmyCake.render();"},"htmlExtras":"","components":[{"title":"./components/ColumnStacked.html","contents":"{#each $data as series, i}\n  {#each series as d}\n    <rect class='group-rect' data-id=\"{i}\" x=\"{$xGet(d)}\" y=\"{$yGet(d)[1]}\" {width} height=\"{height(d)}\"fill={fill(series.key)}></rect>\n  {/each}\n  }\n{/each}\n\n<script>\nimport { scaleOrdinal } from 'd3-scale';\n\nexport default {\n  namespace: 'svg',\n  computed: {\n    colorScale: ({ $xScale, $seriesNames_, $data, opts }) => {\n      return scaleOrdinal()\n        .domain($seriesNames_)\n        .range(opts.colors);\n    },\n    fill: ({ colorScale }) => {\n      return seriesName => colorScale(seriesName);\n    },\n    width: ({ $xScale }) => {\n      return $xScale.bandwidth();\n    },\n    height: ({ $height, $xScale, $yGet }) => {\n      return (d) => {\n        const vals = $yGet(d);\n        return vals[0] - vals[1];\n      };\n    }\n  }\n};\n</script>"},{"title":"./components/AxisXScaleBand.html","contents":"<g class='axis x-axis'>\n  {#each $xScale.domain() as tick}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if opts.gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text y='16' x=\"{$xScale.bandwidth() / 2}\">{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n\n  .x-axis .tick text {\n    text-anchor: middle;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg'\n};\n</script>"},{"title":"./components/AxisY.html","contents":"<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(opts.ticks || opts.tickNumber || 5) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if opts.gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg'\n};\n</script>"}],"modules":[{"title":"./data/fruitOrdinal.js","contents":"/* --------------------------------------------\n *\n * Example data for stacked charts\n * from D3 documentation\n * Adapted from https://github.com/d3/d3-shape/blob/master/README.md#stack\n *\n * --------------------------------------------\n */\nexport default [\n  {year: '2019', apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {year: '2018', apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {year: '2017', apples: 820, bananas: 1000, cherries: 640, dates: 400},\n  {year: '2016', apples: 820, bananas: 560, cherries: 720, dates: 400}\n];"}],"componentModules":[],"dek":""}