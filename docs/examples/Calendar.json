{"main":{"title":"main.js","contents":"import { default as LayerCake, newDiv } from 'layercake';\nimport dates from './data/dates.js';\nimport { nest } from 'd3-collection';\nimport { csvParse } from 'd3-dsv';\nimport CalendarMonth from './components/CalendarMonth.html';\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nconst datesJson = csvParse(dates, row => {\n  row.date = new Date(row.timestring);\n  return row;\n});\n\n/* --------------------------------------------\n * Group by month then by date\n */\nconst byMonthByDate = nest()\n  .key(d => d.date.getUTCMonth())\n  .key(d => d.timestring.split('T')[0])\n  .entries(datesJson);\n\nbyMonthByDate.sort((a, b) => a.key - b.key).forEach((month, i) => {\n  const margin = 5;\n  const width = (100 / byMonthByDate.length) - Math.floor((margin / (Math.max(byMonthByDate.length - 1, 1))));\n  const styles = {\n    display: 'inline-block',\n    position: 'relative',\n    'vertical-align': 'top',\n    'width': `${width}%`,\n    height: '100%',\n    'margin-top': '25px'\n  };\n  // Apply margin to everything that isn't the first one\n  if (i !== byMonthByDate.length - 1) {\n    styles['margin-right'] = `${margin}%`;\n  }\n  const target = newDiv('calendar', styles, document.getElementById('my-chart'));\n\n  target.dataset.month = months[+month.key - 1];\n\n  const myCake = new LayerCake({\n    padding: { top: 1, right: 1, bottom: 1, left: 1 },\n    x: 'key',\n    // Using the r scale for color but you could also use the y scale\n    r: d => d.values.length,\n    data: month.values,\n    target\n  })\n    .svgLayers([\n      { component: CalendarMonth,\n        opts: {\n          // Constrain the figure so it fits into the container div showing either five weeks or seven days across, whichever fits better\n          cellSize: ($width, $height) => {\n            return Math.min($width / 7, $height / 5);\n          }\n        }\n      }\n    ]);\n\n  myCake.render();\n});"},"htmlExtras":"","components":[{"title":"./components/CalendarMonth.html","contents":"{#each days as day}\n  <rect\n    class=\"day\"\n    width=\"{cellSize}\"\n    height=\"{cellSize}\"\n    x=\"{rectX(day)}\"\n    y=\"{rectY(day)}\"\n    style=\"fill:{fillColor(day)};\"\n    on:mouseover=\"showCount(day)\"\n  >\n  </rect>\n{/each}\n\n<style>\n  .day {\n    stroke: #000;\n    stroke-width: 1;\n    fill: #fff;\n  }\n  :global(.calendar:before) {\n    content: attr(data-month);\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translate(0, -100%);\n  }\n\n</style>\n\n<script>\nimport { scaleQuantize } from 'd3-scale';\nimport { timeFormat } from 'd3-time-format';\nimport { timeDay } from 'd3-time';\n\nconst getDayOfWeek = timeFormat('%w');\nconst getWeekOfYear = timeFormat('%U');\n\nexport default {\n  namespace: 'svg',\n  computed: {\n    count: ({ $data, $x, $r }) => {\n      return date => {\n        const stringDate = date.toISOString().split('T')[0];\n        const days = $data.filter(d => $x(d) === stringDate)[0];\n        if (days) {\n          return $r(days);\n        }\n        return 0;\n      };\n    },\n    colorScale: ({ $domains }) => {\n      return scaleQuantize()\n        .domain($domains.r)\n        .range(['#fff5cc','#ffeba9','#ffe182','#ffd754','#ffcc00']);\n    },\n    fillColor: ({ count, colorScale }) => {\n      return day => {\n        const n = count(day);\n        return n ? colorScale(n) : '#fff';\n      };\n    },\n    cellSize: ({ opts, $width, $height }) => {\n      return opts.cellSize($width, $height);\n    },\n    days: ({ $domains, $x, cellSize }) => {\n      /* --------------------------------------------\n       * Calculate what month we're in and generate the full days of that month\n       */\n\n      const minDate = $domains.x[0];\n      const parts = minDate.split('-').map(d => +d);\n\n      const days = timeDay.range(new Date(Date.UTC(parts[0], parts[1] - 1, 1)), new Date(Date.UTC(parts[0], parts[1], 1)));\n      return days;\n    },\n    rectX: ({ $x, cellSize }) => {\n      /* --------------------------------------------\n       * Offset x by the day of the week for this day\n       */\n      return day => {\n        return getDayOfWeek(day) * cellSize;\n      };\n    },\n    rectY: ({ cellSize }) => {\n      /* --------------------------------------------\n       * Offset y by the week in this month\n       * We don't have a convenient way to do this so get the week of the year\n       * minus the week of the year of the first week in this month\n       */\n      return day => {\n        const startWeek = getWeekOfYear(new Date(day.getUTCFullYear(), day.getUTCMonth(), 1));\n        const thisWeek = getWeekOfYear(day);\n        const weekDiff = thisWeek - startWeek;\n        return weekDiff * cellSize;\n      };\n    }\n  },\n  methods: {\n    showCount (day) {\n      const { count } = this.get();\n      console.log(day, count(day));\n    }\n  }\n};\n</script>"}],"modules":[{"title":"./data/dates.js","contents":"export default `timestring\n2018-07-22T22:25:55Z\n2018-07-22T19:35:29Z\n2018-07-22T18:54:42Z\n2018-07-22T02:05:59Z\n2018-07-21T00:55:02Z\n2018-07-21T00:53:00Z\n2018-07-20T23:32:37Z\n2018-07-20T17:52:55Z\n2018-07-20T17:52:01Z\n2018-07-20T17:32:21Z\n2018-07-20T16:38:22Z\n2018-07-20T16:38:20Z\n2018-07-19T21:07:28Z\n2018-07-19T01:36:47Z\n2018-07-19T01:00:04Z\n2018-07-18T20:15:35Z\n2018-07-18T03:05:05Z\n2018-07-18T02:56:18Z\n2018-07-18T02:11:53Z\n2018-07-18T02:08:49Z\n2018-07-18T02:02:14Z\n2018-07-17T04:13:29Z\n2018-07-16T03:24:58Z\n2018-07-16T03:23:55Z\n2018-07-16T03:22:02Z\n2018-07-15T18:37:05Z\n2018-07-15T01:34:48Z\n2018-07-15T01:11:38Z\n2018-07-15T01:02:25Z\n2018-07-14T23:32:07Z\n2018-07-14T18:26:04Z\n2018-07-14T18:25:35Z\n2018-07-14T02:56:28Z\n2018-07-13T16:33:57Z\n2018-07-13T15:52:16Z\n2018-07-12T20:31:12Z\n2018-07-12T20:27:11Z\n2018-07-12T14:17:18Z\n2018-07-12T03:49:28Z\n2018-07-12T03:42:33Z\n2018-07-12T03:20:45Z\n2018-07-12T01:47:25Z\n2018-07-12T01:26:16Z\n2018-07-12T01:16:55Z\n2018-07-12T00:50:15Z\n2018-07-11T19:16:21Z\n2018-07-11T02:38:15Z\n2018-07-11T01:03:55Z\n2018-07-11T01:00:55Z\n2018-07-11T00:59:31Z\n2018-07-10T19:06:36Z\n2018-07-10T19:03:18Z\n2018-07-10T01:05:50Z\n2018-07-09T23:43:32Z\n2018-07-09T17:39:53Z\n2018-07-09T17:37:15Z\n2018-07-09T15:50:12Z\n2018-07-09T03:47:16Z\n2018-07-09T03:06:21Z\n2018-07-09T02:59:34Z\n2018-07-08T20:53:53Z\n2018-07-07T01:37:58Z\n2018-07-07T01:32:23Z\n2018-07-07T01:30:09Z\n2018-07-06T17:03:39Z\n2018-07-06T16:00:39Z\n2018-07-06T15:59:44Z\n2018-07-04T22:29:55Z\n2018-07-03T02:59:41Z\n2018-07-03T02:58:36Z\n2018-07-03T02:56:41Z\n2018-07-01T02:21:56Z\n2018-07-01T02:20:27Z\n2018-07-01T02:15:25Z\n2018-04-29T02:22:38Z\n2018-04-29T02:19:25Z\n2018-04-28T22:48:50Z\n2018-04-28T06:52:20Z\n2018-04-28T06:45:09Z\n2018-04-26T21:18:11Z\n2018-04-26T17:35:37Z\n2018-04-26T01:52:56Z\n2018-04-26T01:07:36Z\n2018-04-26T01:05:37Z\n2018-04-26T01:05:27Z\n2018-04-26T01:00:30Z\n2018-04-25T22:06:56Z\n2018-04-25T21:32:42Z\n2018-04-24T22:48:43Z\n2018-04-24T22:48:26Z\n2018-04-24T21:59:53Z\n2018-04-24T21:58:36Z\n2018-04-24T05:21:33Z\n2018-04-21T03:36:45Z\n2018-04-21T03:25:06Z\n2018-04-20T17:57:25Z\n2018-04-20T17:29:16Z\n2018-04-20T17:24:44Z\n2018-04-20T15:53:26Z\n2018-04-20T15:32:59Z\n2018-04-18T17:33:38Z\n2018-04-18T15:28:30Z\n2018-04-18T15:16:40Z\n2018-04-18T15:07:48Z\n2018-04-18T13:56:38Z\n2018-04-18T04:46:00Z\n2018-04-18T04:45:33Z\n2018-04-18T02:19:48Z\n2018-04-18T01:28:23Z\n2018-04-17T23:11:52Z\n2018-04-17T23:11:52Z\n2018-04-17T23:05:10Z\n2018-04-17T21:15:49Z\n2018-04-17T21:15:41Z\n2018-04-16T04:20:34Z\n2018-04-16T04:20:15Z\n2018-04-16T04:19:46Z\n2018-04-16T04:18:59Z\n2018-04-16T04:14:41Z\n2018-04-16T03:54:01Z\n2018-04-16T03:53:10Z\n2018-04-15T02:28:02Z\n2018-04-14T17:41:43Z\n2018-04-14T04:42:10Z\n2018-04-14T04:40:23Z\n2018-04-14T04:40:10Z\n2018-04-14T01:31:38Z\n2018-04-14T00:23:02Z\n2018-04-13T18:17:10Z\n2018-04-13T18:08:21Z\n2018-04-13T15:29:46Z\n2018-04-13T15:15:33Z\n2018-04-13T04:54:39Z\n2018-04-13T04:27:48Z\n2018-04-13T04:24:37Z\n2018-04-13T04:08:45Z\n2018-04-13T03:53:50Z\n2018-04-13T03:42:23Z\n2018-04-12T19:03:27Z\n2018-04-11T00:32:39Z\n2018-04-11T00:32:32Z\n2018-04-09T02:57:20Z\n2018-04-09T02:54:40Z\n2018-04-08T04:28:23Z\n2018-04-08T02:19:41Z\n2018-04-08T00:50:51Z\n2018-04-08T00:40:52Z\n2018-04-07T21:54:06Z\n2018-04-07T21:53:09Z\n2018-04-07T19:09:30Z\n2018-04-07T18:55:04Z\n2018-04-07T18:51:44Z\n2018-04-07T17:24:28Z\n2018-04-07T02:31:18Z\n2018-04-05T04:20:20Z\n2018-04-05T04:19:13Z\n2018-04-05T04:16:31Z\n2018-04-05T04:09:51Z\n2018-04-05T04:05:10Z\n2018-04-05T04:04:29Z\n2018-04-05T04:02:12Z\n2018-04-05T03:59:43Z\n2018-04-05T03:47:58Z\n2018-04-05T03:43:55Z\n2018-04-05T03:29:56Z\n2018-04-05T03:16:56Z\n2018-04-05T02:21:36Z\n2018-04-05T01:31:23Z\n2018-04-05T01:30:41Z\n2018-04-04T02:47:42Z\n2018-04-04T02:45:33Z\n2018-04-04T02:45:05Z\n2018-04-03T23:56:11Z\n2018-04-03T23:55:17Z\n2018-04-03T23:54:47Z\n2018-04-03T23:54:37Z\n2018-04-03T23:32:11Z\n2018-04-03T05:21:21Z\n2018-04-03T05:21:09Z\n2018-04-03T05:19:31Z\n2018-04-03T05:08:45Z\n2018-04-03T05:00:12Z\n2018-04-03T04:56:14Z\n2018-04-03T04:55:39Z\n2018-04-03T02:51:39Z\n2018-04-03T02:02:43Z\n2018-04-03T02:02:36Z\n2018-04-03T02:01:59Z\n2018-04-03T02:01:27Z\n2018-04-03T00:32:13Z\n2018-04-03T00:31:16Z\n2018-04-03T00:29:42Z\n2018-04-03T00:27:39Z\n2018-04-02T03:33:34Z\n2018-04-02T01:14:13Z\n2018-04-02T01:09:56Z\n2018-04-02T00:59:54Z\n2018-04-01T05:22:24Z\n2018-04-01T04:30:49Z\n2018-04-01T04:30:25Z`;"}],"componentModules":[],"dek":"Another small multiple example that generates the full date range for that month and puts each month inside its own div. This includes some extra stuff calculating the CSS the `styles` object. You could also put this stuff in normal CSS, which is probably a better idea. We do it in the JavaScript here since having styles work with this examples site and the downloaded version needs a little more work ðŸ˜³.\n"}