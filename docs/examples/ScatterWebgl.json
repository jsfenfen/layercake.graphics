{"main":{"title":"main.js","contents":"import LayerCake from 'layercake';\nimport points from './data/points.js';\nimport ScatterWebgl from './components/ScatterWebgl.html';\nimport AxisX from './components/AxisX.html';\nimport AxisY from './components/AxisY.html';\n\nconst diameter = 7;\nconst padding = 4;\n\nconst myCake = new LayerCake({\n  padding: { top: 0, right: 5, bottom: 20, left: 25 },\n  x: 'myX',\n  y: 'myY',\n  xPadding: [padding, padding],\n  yPadding: [padding, padding],\n  data: points,\n  target: document.getElementById('my-chart'),\n  custom: { diameter }\n})\n  .svgLayers([\n    { component: AxisX, opts: {} },\n    { component: AxisY, opts: {} }\n  ])\n  .webglLayers([\n    { component: ScatterWebgl, opts: { color: '#ab00d6' } }\n  ]);\n\nmyCake.render();"},"components":[{"title":"./components/ScatterWebgl.html","contents":"<script>\nimport * as reglWrapper from 'regl';\n\nfunction resize (gl) {\n  const canvas = gl.canvas;\n  // Lookup the size the browser is displaying the canvas.\n  var displayWidth = canvas.clientWidth;\n  var displayHeight = canvas.clientHeight;\n\n  // Check if the canvas is not the same size.\n  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n    // Make the canvas the same size\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n  gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nexport default {\n  onstate () {\n    const { gl } = this.get();\n    const { xGet, yGet, data, custom } = this.store.get();\n\n    resize(gl);\n    const regl = reglWrapper(gl);\n\n    const draw = regl({\n      // circle code comes from:\n      // https://www.desultoryquest.com/blog/drawing-anti-aliased-circular-points-using-opengl-slash-webgl/\n      frag: `\n        precision mediump float;\n        uniform vec4 color;\n        void main () {\n          float r = 0.0, delta = 0.0, alpha = 1.0;\n          vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n          r = dot(cxy, cxy);\n          if (r > 1.0) {\n              discard;\n          }\n          gl_FragColor = color * alpha;\n        }`,\n      vert: `\n        precision mediump float;\n        attribute vec2 position;\n        attribute float pointWidth;\n\n        uniform float stageWidth;\n        uniform float stageHeight;\n\n        // helper function to transform from pixel space to normalized\n        // device coordinates (NDC). In NDC (0,0) is the middle,\n        // (-1, 1) is the top left and (1, -1) is the bottom right.\n        // Stolen from Peter Beshai's great blog post:\n        // http://peterbeshai.com/beautifully-animate-points-with-webgl-and-regl.html\n        vec2 normalizeCoords(vec2 position) {\n          // read in the positions into x and y vars\n          float x = position[0];\n          float y = position[1];\n\n          return vec2(\n            2.0 * ((x / stageWidth) - 0.5),\n            // invert y to treat [0,0] as bottom left in pixel space\n            -(2.0 * ((y / stageHeight) - 0.5)));\n        }\n\n        void main () {\n          gl_PointSize = pointWidth;\n          gl_Position = vec4(normalizeCoords(position), 0, 1);\n        }`,\n      attributes: {\n        // There will be a position value for each point\n        // we pass in\n        position: function (context, props) {\n          return props.points.map(function (point) {\n            return [xGet(point), yGet(point)];\n          });\n        },\n        // Now pointWidth is an attribute, as each\n        // point will have a different size.\n        pointWidth: function (context, props) {\n          // If using an r-scale, set width here\n          return props.points.map(function (point) {\n            return props.pointWidth;\n          });\n        }\n      },\n      uniforms: {\n        color: [1, 0.304, 1.000, 1.000],\n\n        // FYI: there is a helper method for grabbing\n        // values out of the context as well.\n        // These uniforms are used in our fragment shader to\n        // convert our x / y values to WebGL coordinate space.\n        stageWidth: regl.context('drawingBufferWidth'),\n        stageHeight: regl.context('drawingBufferHeight')\n      },\n      count: function (context, props) {\n        // set the count based on the number of points we have\n        return props.points.length;\n      },\n      primitive: 'points'\n    });\n\n    draw({\n      pointWidth: custom.diameter,\n      points: data\n    });\n  }\n};\n</script>"},{"title":"./components/AxisX.html","contents":"<g class='axis x-axis'>\n  {#each ticks as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if opts.gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text y='16' text-anchor='{textAnchor(i)}'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n  {#if opts.baseline === true}\n    <line class=\"baseline\" y1='{$height - 0.5}' y2='{$height - 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg',\n  computed: {\n    ticks: ({ $xScale, opts }) => {\n      return $xScale.ticks(opts.tickNumber);\n    },\n    textAnchor: ({ ticks, opts }) => {\n      return function (i) {\n        if (opts.snapTicks === true) {\n          if (i === 0) {\n            return 'start';\n          }\n          if (i === ticks.length -1) {\n            return 'end';\n          }\n        }\n        return 'middle';\n      };\n    }\n  }\n};\n</script>"},{"title":"./components/AxisY.html","contents":"<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(opts.tickNumber || 5) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if opts.gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg'\n};\n</script>"}],"modules":[{"title":"./data/points.js","contents":"export default [\n  {\n    myX: 1979,\n    myY: 7.19\n  },\n  {\n    myX: 1980,\n    myY: 7.83\n  },\n  {\n    myX: 1981,\n    myY: 7.24\n  },\n  {\n    myX: 1982,\n    myY: 7.44\n  },\n  {\n    myX: 1983,\n    myY: 7.51\n  },\n  {\n    myX: 1984,\n    myY: 7.1\n  },\n  {\n    myX: 1985,\n    myY: 6.91\n  },\n  {\n    myX: 1986,\n    myY: 7.53\n  },\n  {\n    myX: 1987,\n    myY: 7.47\n  },\n  {\n    myX: 1988,\n    myY: 7.48\n  },\n  {\n    myX: 1989,\n    myY: 7.03\n  },\n  {\n    myX: 1990,\n    myY: 6.23\n  },\n  {\n    myX: 1991,\n    myY: 6.54\n  },\n  {\n    myX: 1992,\n    myY: 7.54\n  },\n  {\n    myX: 1993,\n    myY: 6.5\n  },\n  {\n    myX: 1994,\n    myY: 7.18\n  },\n  {\n    myX: 1995,\n    myY: 6.12\n  },\n  {\n    myX: 1996,\n    myY: 7.87\n  },\n  {\n    myX: 1997,\n    myY: 6.73\n  },\n  {\n    myX: 1998,\n    myY: 6.55\n  },\n  {\n    myX: 1999,\n    myY: 6.23\n  },\n  {\n    myX: 2000,\n    myY: 6.31\n  },\n  {\n    myX: 2001,\n    myY: 6.74\n  },\n  {\n    myX: 2002,\n    myY: 5.95\n  },\n  {\n    myX: 2003,\n    myY: 6.13\n  },\n  {\n    myX: 2004,\n    myY: 6.04\n  },\n  {\n    myX: 2005,\n    myY: 5.56\n  },\n  {\n    myX: 2006,\n    myY: 5.91\n  },\n  {\n    myX: 2007,\n    myY: 4.29\n  },\n  {\n    myX: 2008,\n    myY: 4.72\n  },\n  {\n    myX: 2009,\n    myY: 5.38\n  },\n  {\n    myX: 2010,\n    myY: 4.92\n  },\n  {\n    myX: 2011,\n    myY: 4.61\n  },\n  {\n    myX: 2012,\n    myY: 3.62\n  },\n  {\n    myX: 2013,\n    myY: 5.35\n  },\n  {\n    myX: 2014,\n    myY: 5.28\n  },\n  {\n    myX: 2015,\n    myY: 4.63\n  },\n  {\n    myX: 2016,\n    myY: 4.72\n  }\n];"}],"componentModules":[],"dek":""}