{"main":{"title":"main.js","contents":"import LayerCake from 'layercake';\nimport points from './data/points.js';\nimport ScatterWebgl from './components/ScatterWebgl.html';\nimport AxisX from './components/AxisX.html';\nimport AxisY from './components/AxisY.html';\nimport QuadTree from './components/QuadTree.html';\n\nconst diameter = 6;\nconst padding = 6;\n\nconst myCake = new LayerCake({\n  padding: { top: 0, right: 5, bottom: 20, left: 25 },\n  x: 'myX',\n  y: 'myY',\n  xPadding: [padding, padding],\n  yPadding: [padding, padding],\n  data: points,\n  target: document.getElementById('my-chart'),\n  custom: { diameter }\n})\n  .svgLayers([\n    { component: AxisX, opts: {} },\n    { component: AxisY, opts: {} }\n  ])\n  .webglLayers([\n    { component: ScatterWebgl, opts: { } }\n  ])\n  .htmlLayers([\n    { component: QuadTree, opts: { color: '#fff' } }\n  ]);\n\nmyCake.render();"},"htmlExtras":"","components":[{"title":"./components/ScatterWebgl.html","contents":"<script>\nimport * as reglWrapper from 'regl';\n\nfunction resize (gl) {\n  const canvas = gl.canvas;\n  // Lookup the size the browser is displaying the canvas.\n  var displayWidth = canvas.clientWidth;\n  var displayHeight = canvas.clientHeight;\n\n  // Check if the canvas is not the same size.\n  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n    // Make the canvas the same size\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n  gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nexport default {\n  // onupdate is fired after the dom is updated so it's a good time to\n  // resize and redraw\n  onupdate () {\n    const { gl } = this.get();\n\n    resize(gl);\n\n    // This reinstantiates the regl canvas every time\n    // it seems to be necessary to get it to size properly\n    // but maybe there's a better way\n    const regl = reglWrapper({\n      gl,\n      extensions: ['oes_standard_derivatives']\n    });\n\n    this.render(regl);\n  },\n  methods: {\n    render (regl) {\n      const { xGet, yGet, data, custom } = this.store.get();\n\n      regl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1\n      });\n\n      const draw = regl({\n        // circle code comes from:\n        // https://www.desultoryquest.com/blog/drawing-anti-aliased-circular-points-using-opengl-slash-webgl/\n        frag: `\n        #extension GL_OES_standard_derivatives : enable\n        precision mediump float;\n        uniform vec3 fill_color;\n        uniform vec3 stroke_color;\n        varying float s_s;\n        void main () {\n\n          vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n\n          float dist = dot(cxy, cxy);\n\n          float delta = fwidth(dist);\n\n          float alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, dist);\n\n          float outer_edge_center = 1.0 - s_s;\n          float stroke = 1.0 - smoothstep(outer_edge_center - delta, outer_edge_center + delta, dist);\n\n          // gl_FragColor = vec4(fill_color,1.0) * alpha;\n          gl_FragColor = vec4( mix(stroke_color, fill_color, stroke), 1.0 ) * alpha;\n          gl_FragColor.rgb *= gl_FragColor.a;\n        }`,\n        vert: `\n        precision mediump float;\n        attribute vec2 position;\n        attribute float r;\n        attribute float stroke_size;\n\n        varying float s_s;\n\n        uniform float stage_width;\n        uniform float stage_height;\n\n        // http://peterbeshai.com/beautifully-animate-points-with-webgl-and-regl.html\n        vec2 normalizeCoords(vec2 position) {\n          // read in the positions into x and y vars\n          float x = position[0];\n          float y = position[1];\n          return vec2(\n            2.0 * ((x / stage_width) - 0.5),\n            // invert y to treat [0,0] as bottom left in pixel space\n            -(2.0 * ((y / stage_height) - 0.5))\n          );\n        }\n\n        void main () {\n          s_s = stroke_size;\n          gl_PointSize = r;\n          gl_Position = vec4(normalizeCoords(position), 0.0, 1.0);\n        }`,\n        attributes: {\n          // There will be a position value for each point\n          // we pass in\n          position: (context, props) => {\n            return props.points.map(point => {\n              return [xGet(point), yGet(point)];\n            });\n          },\n          r: (context, props) => {\n            // const m = window.devicePixelRatio > 1 ? 4.0 : 2.0\n            // If using an r-scale, set width here\n            return props.points.map(point => props.pointWidth);\n          },\n          stroke_size: (context, props) => {\n            // If using an r-scale, set width here\n            return props.points.map(point => 0);\n          }\n        },\n        uniforms: {\n          fill_color: [0.6705882352941176, 0, 0.8392156862745098],\n          // stroke_color: [0.6705882352941176, 0, 0.8392156862745098],\n          stroke_color: [0, 0, 0],\n          // FYI: there is a helper method for grabbing\n          // values out of the context as well.\n          // These uniforms are used in our fragment shader to\n          // convert our x / y values to WebGL coordinate space.\n          stage_width: regl.context('drawingBufferWidth'),\n          stage_height: regl.context('drawingBufferHeight')\n        },\n        count: (context, props) => {\n          // set the count based on the number of points we have\n          return props.points.length;\n        },\n        primitive: 'points',\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: 'src alpha',\n            srcAlpha: 'src alpha',\n            dstRGB: 'one minus src alpha',\n            dstAlpha: 'one minus src alpha'\n          }\n        },\n        depth: { enable: false },\n      });\n\n      draw({\n        pointWidth: custom.diameter,\n        points: data\n      });\n    }\n  }\n};\n</script>"},{"title":"./components/AxisX.html","contents":"<g class='axis x-axis'>\n  {#each ticks as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if opts.gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text y='16' text-anchor='{textAnchor(i)}'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n  {#if opts.baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg',\n  computed: {\n    ticks: ({ $xScale, opts }) => {\n      return $xScale.ticks(opts.tickNumber);\n    },\n    textAnchor: ({ ticks, opts }) => {\n      return function (i) {\n        if (opts.snapTicks === true) {\n          if (i === 0) {\n            return 'start';\n          }\n          if (i === ticks.length - 1) {\n            return 'end';\n          }\n        }\n        return 'middle';\n      };\n    }\n  }\n};\n</script>"},{"title":"./components/AxisY.html","contents":"<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(opts.tickNumber || 5) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if opts.gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg'\n};\n</script>"},{"title":"./components/QuadTree.html","contents":"<div ref:bg on:mousemove=\"mousemove(event)\" on:mouseout=\"mouseout()\"></div>\n<div ref:circle style=\"top:{$yGet(highlight)}px;left:{$xGet(highlight)}px;display: { visible === true ? 'block' : 'none' };background-color:{opts.color};\"></div>\n\n<style>\n  ref:bg,\n  ref:circle {\n    position: absolute;\n  }\n\n  ref:bg {\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n\n  ref:circle {\n    border-radius: 50%;\n    width: 8px;\n    height: 8px;\n    border: 1px solid #000;\n    transform: translate(-50%, -50%);\n    pointer-events: none;\n  }\n</style>\n\n<script>\nimport { quadtree } from 'd3-quadtree';\n\nexport default {\n  data () {\n    return {\n      highlight: {},\n      visible: false\n    };\n  },\n  computed: {\n    finder: ({ $data, $xGet, $yGet, $width, $height }) => {\n      return quadtree()\n        .extent([[-1, -1], [$width + 1, $height + 1]])\n        .x($xGet)\n        .y($yGet)\n        .addAll($data);\n    }\n  },\n  methods: {\n    mousemove (e) {\n      // const el = this.refs.tooltip;\n      const { finder } = this.get();\n      const found = finder.find(e.layerX, e.layerY, 300);\n\n      if (found) {\n        this.set({ visible: true, highlight: found });\n      } else {\n        this.set({ visible: false });\n      }\n    },\n\n    mouseout () {\n      this.set({ visible: false });\n    }\n  }\n};\n</script>"}],"modules":[{"title":"./data/points.js","contents":"export default [\n  {\n    myX: 1979,\n    myY: 7.19\n  },\n  {\n    myX: 1980,\n    myY: 7.83\n  },\n  {\n    myX: 1981,\n    myY: 7.24\n  },\n  {\n    myX: 1982,\n    myY: 7.44\n  },\n  {\n    myX: 1983,\n    myY: 7.51\n  },\n  {\n    myX: 1984,\n    myY: 7.1\n  },\n  {\n    myX: 1985,\n    myY: 6.91\n  },\n  {\n    myX: 1986,\n    myY: 7.53\n  },\n  {\n    myX: 1987,\n    myY: 7.47\n  },\n  {\n    myX: 1988,\n    myY: 7.48\n  },\n  {\n    myX: 1989,\n    myY: 7.03\n  },\n  {\n    myX: 1990,\n    myY: 6.23\n  },\n  {\n    myX: 1991,\n    myY: 6.54\n  },\n  {\n    myX: 1992,\n    myY: 7.54\n  },\n  {\n    myX: 1993,\n    myY: 6.5\n  },\n  {\n    myX: 1994,\n    myY: 7.18\n  },\n  {\n    myX: 1995,\n    myY: 6.12\n  },\n  {\n    myX: 1996,\n    myY: 7.87\n  },\n  {\n    myX: 1997,\n    myY: 6.73\n  },\n  {\n    myX: 1998,\n    myY: 6.55\n  },\n  {\n    myX: 1999,\n    myY: 6.23\n  },\n  {\n    myX: 2000,\n    myY: 6.31\n  },\n  {\n    myX: 2001,\n    myY: 6.74\n  },\n  {\n    myX: 2002,\n    myY: 5.95\n  },\n  {\n    myX: 2003,\n    myY: 6.13\n  },\n  {\n    myX: 2004,\n    myY: 6.04\n  },\n  {\n    myX: 2005,\n    myY: 5.56\n  },\n  {\n    myX: 2006,\n    myY: 5.91\n  },\n  {\n    myX: 2007,\n    myY: 4.29\n  },\n  {\n    myX: 2008,\n    myY: 4.72\n  },\n  {\n    myX: 2009,\n    myY: 5.38\n  },\n  {\n    myX: 2010,\n    myY: 4.92\n  },\n  {\n    myX: 2011,\n    myY: 4.61\n  },\n  {\n    myX: 2012,\n    myY: 3.62\n  },\n  {\n    myX: 2013,\n    myY: 5.35\n  },\n  {\n    myX: 2014,\n    myY: 5.28\n  },\n  {\n    myX: 2015,\n    myY: 4.63\n  },\n  {\n    myX: 2016,\n    myY: 4.72\n  }\n];"}],"componentModules":[],"dek":""}